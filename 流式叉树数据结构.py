import numpy as np
import sys
import numba


class IBTree:
    """
    Interweavement binary tree
    一般用于储存二进制张量，它会把张量的元素的索引按
    第1级索引从高位到低位数等1位，第2级索引从高位到低位数等1位，第3级索引从高位到低位数等1位,...,第n级索引从高位到低位数等1位,
    第1级索引从高位到低位数等2位，第2级索引从高位到低位数等2位，第3级索引从高位到低位数等2位,...,第n级索引从高位到低位数等2位,
    第1级索引从高位到低位数等3位，第2级索引从高位到低位数等3位，第3级索引从高位到低位数等3位,...,第n级索引从高位到低位数等3位
    ,...,
    第1级索引从高位到低位数等m位，第2级索引从高位到低位数等m位，第3级索引从高位到低位数等m位,...,第n级索引从高位到低位数等m位
    的顺序循环交织融合成一个二进制数并通过二叉树结构储存
    （比如tensor_a[111000101][111101011]中的[111000101][111101011]交织为[111111010001100111]
    ,tensor_b[111000101][111101011][101101001]中的[111000101][111101011][101101001]交织为[111110111011000011100010111]）
    至于只有1级索引的张量，其索引的交织结果就是其索引自身
    于是该数据结构就可以储存几乎所有的二进制张量了
    """

    def __init__(self, num_levels):
        self.num_levels = num_levels
        self.structure = [None] * num_levels
